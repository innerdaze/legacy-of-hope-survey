/* eslint-disable */
// Generated by component library do not modify
import ComponentsAppIcon from './components/AppIcon.jsx';
import ComponentsAppLayout from './components/AppLayout.jsx';
import ComponentsAppProvider from './components/AppProvider.js';
import ComponentsAuthenticatedRoute from './components/AuthenticatedRoute.js';
import ComponentsBackgroundSyncProgress from './components/BackgroundSyncProgress.jsx';
import ComponentsBarcodeInputForm from './components/BarcodeInputForm.jsx';
import ComponentsBlockingProcessDisplay from './components/BlockingProcessDisplay.jsx';
import ComponentsChangeOrderQuantityForm from './components/ChangeOrderQuantityForm.jsx';
import ComponentsDeleteEntityForm from './components/DeleteEntityForm.jsx';
import ComponentsInitialize from './components/Initialize.jsx';
import ComponentsLogin from './components/Login.jsx';
import ComponentsLogoutControl from './components/LogoutControl.jsx';
import ComponentsMainMenu from './components/MainMenu.jsx';
import ComponentsMainMenuControl from './components/MainMenuControl.jsx';
import ComponentsMainMenuHideControl from './components/MainMenuHideControl.jsx';
import ComponentsModeDisplay from './components/ModeDisplay.jsx';
import ComponentsModeSwitcher from './components/ModeSwitcher.jsx';
import ComponentsNavigationBar from './components/NavigationBar.jsx';
import ComponentsOrdersHeaderLayout from './components/OrdersHeaderLayout.jsx';
import ComponentsOrdersLayout from './components/OrdersLayout.jsx';
import ComponentsProcessItemsButton from './components/ProcessItemsButton.jsx';
import ComponentsProductSearch from './components/ProductSearch.jsx';
import ComponentsProductSearchResults from './components/ProductSearchResults.jsx';
import ComponentsPromptStartModifyingTransaction from './components/PromptStartModifyingTransaction.jsx';
import ComponentsRoot from './components/Root.jsx';
import ComponentsScannedItem from './components/ScannedItem.jsx';
import ComponentsScannedItemList from './components/ScannedItemList.jsx';
import ComponentsScanner from './components/Scanner.jsx';
import ComponentsSplash from './components/Splash.jsx';
import ComponentsSyncButton from './components/SyncButton.jsx';

function dispatchEvent(data) {
  if (typeof window !== 'undefined') {
    const BluekitEvent = require('react-bluekit/lib/libraries/BluekitEvent');
    document.dispatchEvent(new BluekitEvent('functionTriggered', data));
  } else
    console.log('Bluekit received function triggered', data)
}

export default {
  ComponentsAppIcon: {
    name: 'ComponentsAppIcon',
    menu: 'Components AppIcon',
    file: './components/AppIcon.jsx',
    component: ComponentsAppIcon,
    componentName: 'AppIcon',
    description: '',
    customProps: {},
    propsDefinition: {},
    simpleProps: {},
    fullProps: {}
  },
  ComponentsAppLayout: {
    name: 'ComponentsAppLayout',
    menu: 'Components AppLayout',
    file: './components/AppLayout.jsx',
    component: ComponentsAppLayout,
    componentName: 'AppLayout',
    description: '',
    customProps: {},
    propsDefinition: {children:{type:{name:"array"},required:true,description:""}},
    simpleProps: {children:[]},
    fullProps: {children:[]}
  },
  ComponentsAppProvider: {
    name: 'ComponentsAppProvider',
    menu: 'Components AppProvider',
    file: './components/AppProvider.js',
    component: ComponentsAppProvider,
    componentName: 'AppProvider',
    description: '',
    customProps: {},
    propsDefinition: {store:{type:{name:"object"},required:true,description:""},children:{type:{name:"object"},required:true,description:""}},
    simpleProps: {store:{},children:{}},
    fullProps: {store:{},children:{}}
  },
  ComponentsAuthenticatedRoute: {
    name: 'ComponentsAuthenticatedRoute',
    menu: 'Components AuthenticatedRoute',
    file: './components/AuthenticatedRoute.js',
    component: ComponentsAuthenticatedRoute,
    componentName: 'AuthenticatedRoute',
    description: '',
    customProps: {},
    propsDefinition: {component:{type:{name:"func"},required:true,description:""},authed:{type:{name:"bool"},required:false,description:"",defaultValue:{value:"false",computed:false}},location:{type:{name:"object"},required:false,description:"",defaultValue:{value:"null",computed:false}}},
    simpleProps: {component:function () { dispatchEvent({detail: {prop: "component"}}) },authed:false,location:null},
    fullProps: {component:function () { dispatchEvent({detail: {prop: "component"}}) },authed:false,location:null}
  },
  ComponentsBackgroundSyncProgress: {
    name: 'ComponentsBackgroundSyncProgress',
    menu: 'Components BackgroundSyncProgress',
    file: './components/BackgroundSyncProgress.jsx',
    component: ComponentsBackgroundSyncProgress,
    componentName: 'BackgroundSyncProgress',
    description: '',
    customProps: {},
    propsDefinition: {progress:{type:{name:"number"},required:true,description:"",defaultValue:{value:"0",computed:false}}},
    simpleProps: {progress:0},
    fullProps: {progress:0}
  },
  ComponentsBarcodeInputForm: {
    name: 'ComponentsBarcodeInputForm',
    menu: 'Components BarcodeInputForm',
    file: './components/BarcodeInputForm.jsx',
    component: ComponentsBarcodeInputForm,
    componentName: 'BarcodeInputForm',
    description: '',
    customProps: {},
    propsDefinition: {onSubmitBarcode:{type:{name:"func"},required:true,description:"",defaultValue:{value:"Function.prototype",computed:true}},shouldFocusField:{type:{name:"bool"},required:true,description:"",defaultValue:{value:"PropTypes.bool.isRequired",computed:true}}},
    simpleProps: {onSubmitBarcode:"Function.prototype",shouldFocusField:"PropTypes.bool.isRequired"},
    fullProps: {onSubmitBarcode:"Function.prototype",shouldFocusField:"PropTypes.bool.isRequired"}
  },
  ComponentsBlockingProcessDisplay: {
    name: 'ComponentsBlockingProcessDisplay',
    menu: 'Components BlockingProcessDisplay',
    file: './components/BlockingProcessDisplay.jsx',
    component: ComponentsBlockingProcessDisplay,
    componentName: 'BlockingProcessDisplay',
    description: '',
    customProps: {},
    propsDefinition: {component:{type:{name:"object"},required:true,description:"",defaultValue:{value:"null",computed:false}}},
    simpleProps: {component:null},
    fullProps: {component:null}
  },
  ComponentsChangeOrderQuantityForm: {
    name: 'ComponentsChangeOrderQuantityForm',
    menu: 'Components ChangeOrderQuantityForm',
    file: './components/ChangeOrderQuantityForm.jsx',
    component: ComponentsChangeOrderQuantityForm,
    componentName: 'ChangeOrderQuantityForm',
    description: '',
    customProps: {},
    propsDefinition: {order:{type:{name:"object"},required:true,description:""},handleSubmit:{type:{name:"func"},required:true,description:""},handleCancel:{type:{name:"func"},required:true,description:""}},
    simpleProps: {order:{},handleSubmit:function () { dispatchEvent({detail: {prop: "handleSubmit"}}) },handleCancel:function () { dispatchEvent({detail: {prop: "handleCancel"}}) }},
    fullProps: {order:{},handleSubmit:function () { dispatchEvent({detail: {prop: "handleSubmit"}}) },handleCancel:function () { dispatchEvent({detail: {prop: "handleCancel"}}) }}
  },
  ComponentsDeleteEntityForm: {
    name: 'ComponentsDeleteEntityForm',
    menu: 'Components DeleteEntityForm',
    file: './components/DeleteEntityForm.jsx',
    component: ComponentsDeleteEntityForm,
    componentName: 'DeleteEntityForm',
    description: '',
    customProps: {},
    propsDefinition: {message:{type:{name:"string"},required:true,description:"",defaultValue:{value:"'Confirm you would like to delete this item'",computed:false}},onConfirm:{type:{name:"func"},required:true,description:"",defaultValue:{value:"Function.prototype",computed:true}},onCancel:{type:{name:"func"},required:true,description:"",defaultValue:{value:"Function.prototype",computed:true}}},
    simpleProps: {message:"Confirm you would like to delete this item",onConfirm:"Function.prototype",onCancel:"Function.prototype"},
    fullProps: {message:"Confirm you would like to delete this item",onConfirm:"Function.prototype",onCancel:"Function.prototype"}
  },
  ComponentsInitialize: {
    name: 'ComponentsInitialize',
    menu: 'Components Initialize',
    file: './components/Initialize.jsx',
    component: ComponentsInitialize,
    componentName: 'Initialize',
    description: '',
    customProps: {},
    propsDefinition: {onApiRootFormSubmit:{type:{name:"func"},required:true,description:"",defaultValue:{value:"Function.prototype",computed:true}},apiRootValidationError:{type:{name:"string"},required:false,description:"",defaultValue:{value:"null",computed:false}}},
    simpleProps: {onApiRootFormSubmit:"Function.prototype",apiRootValidationError:null},
    fullProps: {onApiRootFormSubmit:"Function.prototype",apiRootValidationError:null}
  },
  ComponentsLogin: {
    name: 'ComponentsLogin',
    menu: 'Components Login',
    file: './components/Login.jsx',
    component: ComponentsLogin,
    componentName: 'Login',
    description: '',
    customProps: {},
    propsDefinition: {login:{type:{name:"func"},required:true,description:"",defaultValue:{value:"Function.prototype",computed:true}}},
    simpleProps: {login:"Function.prototype"},
    fullProps: {login:"Function.prototype"}
  },
  ComponentsLogoutControl: {
    name: 'ComponentsLogoutControl',
    menu: 'Components LogoutControl',
    file: './components/LogoutControl.jsx',
    component: ComponentsLogoutControl,
    componentName: 'LogoutControl',
    description: '',
    customProps: {},
    propsDefinition: {handleLogoutPress:{type:{name:"func"},required:true,description:"",defaultValue:{value:"Function.prototype",computed:true}}},
    simpleProps: {handleLogoutPress:"Function.prototype"},
    fullProps: {handleLogoutPress:"Function.prototype"}
  },
  ComponentsMainMenu: {
    name: 'ComponentsMainMenu',
    menu: 'Components MainMenu',
    file: './components/MainMenu.jsx',
    component: ComponentsMainMenu,
    componentName: 'MainMenu',
    description: '',
    customProps: {},
    propsDefinition: {},
    simpleProps: {},
    fullProps: {}
  },
  ComponentsMainMenuControl: {
    name: 'ComponentsMainMenuControl',
    menu: 'Components MainMenuControl',
    file: './components/MainMenuControl.jsx',
    component: ComponentsMainMenuControl,
    componentName: 'MainMenuControl',
    description: '',
    customProps: {},
    propsDefinition: {showMenu:{type:{name:"func"},required:true,description:"",defaultValue:{value:"Function.prototype",computed:true}}},
    simpleProps: {showMenu:"Function.prototype"},
    fullProps: {showMenu:"Function.prototype"}
  },
  ComponentsMainMenuHideControl: {
    name: 'ComponentsMainMenuHideControl',
    menu: 'Components MainMenuHideControl',
    file: './components/MainMenuHideControl.jsx',
    component: ComponentsMainMenuHideControl,
    componentName: 'MainMenuHideControl',
    description: '',
    customProps: {},
    propsDefinition: {hideMenu:{type:{name:"func"},required:true,description:"",defaultValue:{value:"Function.prototype",computed:true}}},
    simpleProps: {hideMenu:"Function.prototype"},
    fullProps: {hideMenu:"Function.prototype"}
  },
  ComponentsModeDisplay: {
    name: 'ComponentsModeDisplay',
    menu: 'Components ModeDisplay',
    file: './components/ModeDisplay.jsx',
    component: ComponentsModeDisplay,
    componentName: 'ModeDisplay',
    description: '',
    customProps: {},
    propsDefinition: {mode:{type:{name:"number"},required:true,description:"",defaultValue:{value:"modes.ORDERING",computed:true}}},
    simpleProps: {mode:"modes.ORDERING"},
    fullProps: {mode:"modes.ORDERING"}
  },
  ComponentsModeSwitcher: {
    name: 'ComponentsModeSwitcher',
    menu: 'Components ModeSwitcher',
    file: './components/ModeSwitcher.jsx',
    component: ComponentsModeSwitcher,
    componentName: 'ModeSwitcher',
    description: '',
    customProps: {},
    propsDefinition: {onSwitch:{type:{name:"func"},required:true,description:""}},
    simpleProps: {onSwitch:function () { dispatchEvent({detail: {prop: "onSwitch"}}) }},
    fullProps: {onSwitch:function () { dispatchEvent({detail: {prop: "onSwitch"}}) }}
  },
  ComponentsNavigationBar: {
    name: 'ComponentsNavigationBar',
    menu: 'Components NavigationBar',
    file: './components/NavigationBar.jsx',
    component: ComponentsNavigationBar,
    componentName: 'NavigationBar',
    description: '',
    customProps: {},
    propsDefinition: {},
    simpleProps: {},
    fullProps: {}
  },
  ComponentsOrdersHeaderLayout: {
    name: 'ComponentsOrdersHeaderLayout',
    menu: 'Components OrdersHeaderLayout',
    file: './components/OrdersHeaderLayout.jsx',
    component: ComponentsOrdersHeaderLayout,
    componentName: 'OrdersHeaderLayout',
    description: '',
    customProps: {},
    propsDefinition: {},
    simpleProps: {},
    fullProps: {}
  },
  ComponentsOrdersLayout: {
    name: 'ComponentsOrdersLayout',
    menu: 'Components OrdersLayout',
    file: './components/OrdersLayout.jsx',
    component: ComponentsOrdersLayout,
    componentName: 'OrdersLayout',
    description: '',
    customProps: {},
    propsDefinition: {mainMenuVisible:{type:{name:"bool"},required:false,description:"",defaultValue:{value:"false",computed:false}},pendingModification:{type:{name:"object"},required:false,description:"",defaultValue:{value:"null",computed:false}},isChangingOrderQuantity:{type:{name:"bool"},required:true,description:""},onPromptStartModifyingSubmit:{type:{name:"func"},required:true,description:""},onPromptStartModifyingCancel:{type:{name:"func"},required:true,description:""}},
    simpleProps: {mainMenuVisible:false,pendingModification:null,isChangingOrderQuantity:true,onPromptStartModifyingSubmit:function () { dispatchEvent({detail: {prop: "onPromptStartModifyingSubmit"}}) },onPromptStartModifyingCancel:function () { dispatchEvent({detail: {prop: "onPromptStartModifyingCancel"}}) }},
    fullProps: {mainMenuVisible:false,pendingModification:null,isChangingOrderQuantity:true,onPromptStartModifyingSubmit:function () { dispatchEvent({detail: {prop: "onPromptStartModifyingSubmit"}}) },onPromptStartModifyingCancel:function () { dispatchEvent({detail: {prop: "onPromptStartModifyingCancel"}}) }}
  },
  ComponentsProcessItemsButton: {
    name: 'ComponentsProcessItemsButton',
    menu: 'Components ProcessItemsButton',
    file: './components/ProcessItemsButton.jsx',
    component: ComponentsProcessItemsButton,
    componentName: 'ProcessItemsButton',
    description: '',
    customProps: {},
    propsDefinition: {onProcessItemsClick:{type:{name:"func"},required:true,description:"",defaultValue:{value:"Function.prototype",computed:true}}},
    simpleProps: {onProcessItemsClick:"Function.prototype"},
    fullProps: {onProcessItemsClick:"Function.prototype"}
  },
  ComponentsProductSearch: {
    name: 'ComponentsProductSearch',
    menu: 'Components ProductSearch',
    file: './components/ProductSearch.jsx',
    component: ComponentsProductSearch,
    componentName: 'ProductSearch',
    description: '',
    customProps: {},
    propsDefinition: {search:{type:{name:"func"},required:true,description:""},onSelect:{type:{name:"func"},required:true,description:""},results:{type:{name:"array"},required:true,description:""}},
    simpleProps: {search:function () { dispatchEvent({detail: {prop: "search"}}) },onSelect:function () { dispatchEvent({detail: {prop: "onSelect"}}) },results:[]},
    fullProps: {search:function () { dispatchEvent({detail: {prop: "search"}}) },onSelect:function () { dispatchEvent({detail: {prop: "onSelect"}}) },results:[]}
  },
  ComponentsProductSearchResults: {
    name: 'ComponentsProductSearchResults',
    menu: 'Components ProductSearchResults',
    file: './components/ProductSearchResults.jsx',
    component: ComponentsProductSearchResults,
    componentName: 'ProductSearchResults',
    description: '',
    customProps: {},
    propsDefinition: {items:{type:{name:"array"},required:true,description:"",defaultValue:{value:"[]",computed:false}}},
    simpleProps: {items:[]},
    fullProps: {items:[]}
  },
  ComponentsPromptStartModifyingTransaction: {
    name: 'ComponentsPromptStartModifyingTransaction',
    menu: 'Components PromptStartModifyingTransaction',
    file: './components/PromptStartModifyingTransaction.jsx',
    component: ComponentsPromptStartModifyingTransaction,
    componentName: 'PromptStartModifyingTransaction',
    description: '',
    customProps: {},
    propsDefinition: {handleSubmit:{type:{name:"func"},required:true,description:"",defaultValue:{value:"Function.prototype",computed:true}},handleCancel:{type:{name:"func"},required:true,description:"",defaultValue:{value:"Function.prototype",computed:true}}},
    simpleProps: {handleSubmit:"Function.prototype",handleCancel:"Function.prototype"},
    fullProps: {handleSubmit:"Function.prototype",handleCancel:"Function.prototype"}
  },
  ComponentsRoot: {
    name: 'ComponentsRoot',
    menu: 'Components Root',
    file: './components/Root.jsx',
    component: ComponentsRoot,
    componentName: 'Root',
    description: '',
    customProps: {},
    propsDefinition: {initialized:{type:{name:"bool"},required:true,description:"",defaultValue:{value:"false",computed:false}},authed:{type:{name:"bool"},required:true,description:"",defaultValue:{value:"false",computed:false}},isSyncing:{type:{name:"bool"},required:true,description:"",defaultValue:{value:"false",computed:false}},handleNotificationClose:{type:{name:"func"},required:true,description:"",defaultValue:{value:"Function.prototype",computed:true}},error:{type:{name:"object"},required:false,description:"",defaultValue:{value:"null",computed:false}},from:{type:{name:"string"},required:false,description:"",defaultValue:{value:"''",computed:false}}},
    simpleProps: {initialized:false,authed:false,isSyncing:false,handleNotificationClose:"Function.prototype",error:null,from:""},
    fullProps: {initialized:false,authed:false,isSyncing:false,handleNotificationClose:"Function.prototype",error:null,from:""}
  },
  ComponentsScannedItem: {
    name: 'ComponentsScannedItem',
    menu: 'Components ScannedItem',
    file: './components/ScannedItem.jsx',
    component: ComponentsScannedItem,
    componentName: 'ScannedItem',
    description: '',
    customProps: {},
    propsDefinition: {title:{type:{name:"string"},required:true,description:""},onChangeQuantityClick:{type:{name:"func"},required:true,description:""},onDeleteClick:{type:{name:"func"},required:true,description:""},productID:{type:{name:"string"},required:false,description:"",defaultValue:{value:"null",computed:false}},quantity:{type:{name:"number"},required:true,description:""}},
    simpleProps: {title:"title",onChangeQuantityClick:function () { dispatchEvent({detail: {prop: "onChangeQuantityClick"}}) },onDeleteClick:function () { dispatchEvent({detail: {prop: "onDeleteClick"}}) },productID:null,quantity:1},
    fullProps: {title:"title",onChangeQuantityClick:function () { dispatchEvent({detail: {prop: "onChangeQuantityClick"}}) },onDeleteClick:function () { dispatchEvent({detail: {prop: "onDeleteClick"}}) },productID:null,quantity:1}
  },
  ComponentsScannedItemList: {
    name: 'ComponentsScannedItemList',
    menu: 'Components ScannedItemList',
    file: './components/ScannedItemList.jsx',
    component: ComponentsScannedItemList,
    componentName: 'ScannedItemList',
    description: '',
    customProps: {},
    propsDefinition: {onDeleteItemClick:{type:{name:"func"},required:true,description:"",defaultValue:{value:"Function.prototype",computed:true}},onDeleteItemConfirm:{type:{name:"func"},required:true,description:"",defaultValue:{value:"Function.prototype",computed:true}},handleChangeOrderQuantityClick:{type:{name:"func"},required:true,description:"",defaultValue:{value:"Function.prototype",computed:true}},isDeletingOrder:{type:{name:"bool"},required:true,description:"",defaultValue:{value:"false",computed:false}},isProcessing:{type:{name:"bool"},required:true,description:"",defaultValue:{value:"false",computed:false}},items:{type:{name:"array"},required:true,description:"",defaultValue:{value:"[]",computed:false}}},
    simpleProps: {onDeleteItemClick:"Function.prototype",onDeleteItemConfirm:"Function.prototype",handleChangeOrderQuantityClick:"Function.prototype",isDeletingOrder:false,isProcessing:false,items:[]},
    fullProps: {onDeleteItemClick:"Function.prototype",onDeleteItemConfirm:"Function.prototype",handleChangeOrderQuantityClick:"Function.prototype",isDeletingOrder:false,isProcessing:false,items:[]}
  },
  ComponentsScanner: {
    name: 'ComponentsScanner',
    menu: 'Components Scanner',
    file: './components/Scanner.jsx',
    component: ComponentsScanner,
    componentName: 'Scanner',
    description: '',
    customProps: {},
    propsDefinition: {onSubmitBarcode:{type:{name:"func"},required:true,description:""},scan:{type:{name:"func"},required:true,description:""}},
    simpleProps: {onSubmitBarcode:function () { dispatchEvent({detail: {prop: "onSubmitBarcode"}}) },scan:function () { dispatchEvent({detail: {prop: "scan"}}) }},
    fullProps: {onSubmitBarcode:function () { dispatchEvent({detail: {prop: "onSubmitBarcode"}}) },scan:function () { dispatchEvent({detail: {prop: "scan"}}) }}
  },
  ComponentsSplash: {
    name: 'ComponentsSplash',
    menu: 'Components Splash',
    file: './components/Splash.jsx',
    component: ComponentsSplash,
    componentName: 'Splash',
    description: '',
    customProps: {},
    propsDefinition: {loadingText:{type:{name:"string"},required:false,description:"",defaultValue:{value:"'Loading...'",computed:false}},icon:{type:{name:"instanceOf",value:"Component"},required:false,description:"",defaultValue:{value:"null",computed:false}},logo:{type:{name:"instanceOf",value:"Component"},required:false,description:"",defaultValue:{value:"null",computed:false}},title:{type:{name:"instanceOf",value:"Component"},required:false,description:"",defaultValue:{value:"null",computed:false}}},
    simpleProps: {loadingText:"Loading...",icon:null,logo:null,title:null},
    fullProps: {loadingText:"Loading...",icon:null,logo:null,title:null}
  },
  ComponentsSyncButton: {
    name: 'ComponentsSyncButton',
    menu: 'Components SyncButton',
    file: './components/SyncButton.jsx',
    component: ComponentsSyncButton,
    componentName: 'SyncButton',
    description: '',
    customProps: {},
    propsDefinition: {sync:{type:{name:"func"},required:true,description:"",defaultValue:{value:"Function.prototype",computed:true}}},
    simpleProps: {sync:"Function.prototype"},
    fullProps: {sync:"Function.prototype"}
  },
}
